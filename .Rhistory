geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)")
ggplot(ms,
aes(D0,
De,
colour = dummy)) +
# add points to make a scatter plot
geom_point() +
# add vertical error bars
geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)") +
scale_color_brewer()
?scale_color_brewer
ggplot(ms,
aes(D0,
De,
colour = dummy)) +
# add points to make a scatter plot
geom_point() +
# add vertical error bars
geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)") +
scale_color_brewer("BrBG")
Spectr
ggplot(ms,
aes(D0,
De,
colour = dummy)) +
# add points to make a scatter plot
geom_point() +
# add vertical error bars
geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)") +
scale_color_brewer("Spectral")
ggplot(ms,
aes(D0,
De,
colour = dummy)) +
# add points to make a scatter plot
geom_point() +
# add vertical error bars
geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)") +
scale_color_brewer(palette = "Spectral")
ggplot(ms,
aes(D0,
De,
colour = dummy)) +
# add points to make a scatter plot
geom_point() +
# add vertical error bars
geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)") +
scale_color_discrete(c("red", "green")
# 5) How to save the output of R (such as write.cvs and plot pdf)
library(numOSL)
joul17 <- loadBINdata("data/JOUL17-G9_101(SG)discs31-39.BIN",
view = FALSE)
str(joul17)
# visualize decay curves for Position 31
obj_pickBIN <- pickBINdata(joul17,
Position=31,
view=FALSE,
LType="OSL",
force.matrix=TRUE)
obj_pickBIN[[1]][1]
matplot(obj_pickBIN$BINdata[[1]][,1],
obj_pickBIN$BINdata[[1]][,-1],
main="Decay curves",
xlab="Stimulation time (s)",
ylab="Photon counts",
type="l", log="xy")
library(dplyr)
library(tidyr)
decay_curves_data <-
obj_pickBIN$BINdata[[1]] %>%
as_data_frame() %>%
gather(grain,
photon_count ,
-x) %>%
rename(simulation_time = x ) %>%
mutate(photon_count = photon_count + 0.01)
library(ggplot2)
library(scales)
decay_curves_plot <-
ggplot(decay_curves_data,
aes(simulation_time,
photon_count,
colour = grain)) +
geom_line() +
scale_y_continuous(trans = "log2") +
scale_x_continuous(trans = "log2") +
theme_bw() +
ggtitle("Decay curves") +
theme(legend.position="none") +
labs(x = "Simulation time (s)",
y = "Photon count")
library(plotly)
ggplotly(decay_curves_plot)
ggplot(ms,
aes(D0,
De,
colour = dummy)) +
# add points to make a scatter plot
geom_point() +
# add vertical error bars
geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)") +
scale_color_discrete(c("red","green")
# 5) How to save the output of R (such as write.cvs and plot pdf)
library(numOSL)
joul17 <- loadBINdata("data/JOUL17-G9_101(SG)discs31-39.BIN",
view = FALSE)
str(joul17)
# visualize decay curves for Position 31
obj_pickBIN <- pickBINdata(joul17,
Position=31,
view=FALSE,
LType="OSL",
force.matrix=TRUE)
obj_pickBIN[[1]][1]
matplot(obj_pickBIN$BINdata[[1]][,1],
obj_pickBIN$BINdata[[1]][,-1],
main="Decay curves",
xlab="Stimulation time (s)",
ylab="Photon counts",
type="l", log="xy")
library(dplyr)
library(tidyr)
decay_curves_data <-
obj_pickBIN$BINdata[[1]] %>%
as_data_frame() %>%
gather(grain,
photon_count ,
-x) %>%
rename(simulation_time = x ) %>%
mutate(photon_count = photon_count + 0.01)
library(ggplot2)
library(scales)
decay_curves_plot <-
ggplot(decay_curves_data,
aes(simulation_time,
photon_count,
colour = grain)) +
geom_line() +
scale_y_continuous(trans = "log2") +
scale_x_continuous(trans = "log2") +
theme_bw() +
ggtitle("Decay curves") +
theme(legend.position="none") +
labs(x = "Simulation time (s)",
y = "Photon count")
library(plotly)
ggplotly(decay_curves_plot)
ggplot(ms,
aes(D0,
De,
colour = dummy)) +
# add points to make a scatter plot
geom_point() +
# add vertical error bars
geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)") +
scale_color_discrete(c("red","green"))
?scale_color_discrete
ggplot(ms,
aes(D0,
De,
colour = dummy)) +
# add points to make a scatter plot
geom_point() +
# add vertical error bars
geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)") +
scale_colour_brewer("Dark2")
ggplot(ms,
aes(D0,
De,
colour = dummy)) +
# add points to make a scatter plot
geom_point() +
# add vertical error bars
geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)") +
scale_colour_brewer(palette ="Dark2")
x1
c(x1, "DSc")
x1
x1[3] <- "Cert"
x1
x1[5] <- "Cert"
x1
y
y$newcol <- rep("a", 10)
y
c(rep("a", 5), rep("b", 5))
y$newcol <- c(rep("a", 5), rep("b", 5))
y
my_plot <-
ggplot(ms,
aes(D0,
De,
colour = dummy)) +
# add points to make a scatter plot
geom_point() +
# add vertical error bars
geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)") +
# note the manual colour here:
scale_colour_brewer(palette = "Dark2")
library(plotly)
ggplotly(my_plot)
ms
my_plot <-
ggplot(ms,
aes(D0,
De,
colour = dummy,
label = b_value)) +
# add points to make a scatter plot
geom_point() +
# add vertical error bars
geom_errorbar(aes(ymin = De - DeErr,
ymax = De + DeErr,
width = 0)) +
# add horzontal error bars
geom_errorbarh(aes(xmin = D0 - D0_Err,
xmax = D0 + D0_Err,
height = 0)) +
theme_bw() +
coord_equal() +
ggtitle("BDL2-OSL 3/1 - UOW 1919 (80cm)") +
# note the manual colour here:
scale_colour_brewer(palette = "Dark2")
library(plotly)
ggplotly(my_plot)
?save()
y
?write.csv
my_plot
ggsave("my_plot.png")
ggsave("output/my_plot.png")
?ggsave
ggsave("output/my_plot.png",
width = 100,
height = 60,
units = "mm")
ggsave("output/my_plot.png", # more control over size
width = 100,
height = 60,
units = "mm",
dpi = 150)
ggsave("output/my_plot.png", # more control over size
width = 100,
height = 60,
units = "mm",
dpi = 550)
png("output/my_plot.png")
plot(1:10)
dev.off()
pdf("output/my_plot.pdf")
plot(1:10)
dev.off()
install.packages("schoRsch")
library(schoRsch)
install.packages("ezANOVA")
??ezANOVA
install.packages("ez")
require(rgeos)
dd = gDistance(Sl, as(r,"SpatialPoints"), byid=TRUE)
This creates a matrix with a column for each feature in Sl. To get the nearest distance to any feature, apply min over rows:
r[] = apply(dd,1,min)
plot(r)
require(raster)
pol = SpatialPolygons(list(Polygons(list(Polygon(x)), "ID")))
require(sp)
pol = SpatialPolygons(list(Polygons(list(Polygon(x)), "ID")))
pol = SpatialPolygons(list(Polygons(list(Polygon(x)), "ID")))
require(sp)
pol = SpatialPolygons(list(Polygons(list(Polygon(x)), "ID")))
x = cbind(c(0,1,1,0,0),c(0,0,1,1,0))
pol = SpatialPolygons(list(Polygons(list(Polygon(x)), "ID")))
y <- raster()
y
dd = gDistance(pol, as(y,"SpatialPoints"), byid=TRUE)
dd
head(dd)
This creates a matrix with a column for each feature in Sl. To get the nearest distance to any feature, apply min over rows:
y[] = apply(dd,1,min)
plot(y)
?raster
y <- raster(pol)
plot(y)
y
dd = gDistance(pol, as(y,"SpatialPoints"), byid=TRUE)
This creates a matrix with a column for each feature in Sl. To get the nearest distance to any feature, apply min over rows:
y[] = apply(dd,1,min)
plot(y)
?SpatialPolygons
square <- t(replicate(50, {
o <- runif(2)
c(o, o + c(0, 0.1), o + 0.1, o + c(0.1, 0), o)
}))
ID <- paste0('sq', seq_len(nrow(square)))
polys <- SpatialPolygons(mapply(function(poly, id) {
xy <- matrix(poly, ncol=2, byrow=TRUE)
Polygons(list(Polygon(xy)), ID=id)
}, split(square, row(square)), ID))
polys.df <- SpatialPolygonsDataFrame(polys, data.frame(id=ID, row.names=ID))
plot(polys.df, col=rainbow(50, alpha=0.5))
y <- raster(polys.df)
dd = gDistance(polys.df, as(y,"SpatialPoints"), byid=TRUE)
This creates a matrix with a column for each feature in Sl. To get the nearest distance to any feature, apply min over rows:
y[] = apply(dd,1,min)
plot(y)
require(rgeos)
data(meuse)
coordinates(meuse) <- ~x+y
pts <- meuse[sample(1:dim(meuse)[1],142),]
data(meuse.grid)
coordinates(meuse.grid) = c("x", "y")
gridded(meuse.grid) <- TRUE
meuse.grid[["idist"]] = 1 - meuse.grid[["dist"]]
polys <- as(meuse.grid, "SpatialPolygonsDataFrame")
polys <- polys[sample(1:dim(polys)[1],10),]
plot(polys)
plot(pts,pch=19,cex=1.25,add=TRUE)
Fdist <- list()
for(i in 1:dim(pts)[1]) {
pDist <- vector()
for(j in 1:dim(polys)[1]) {
pDist <- append(pDist, gDistance(pts[i,],polys[j,]))
}
Fdist[[i]] <- pDist
}
( min.dist <- unlist(lapply(Fdist, FUN=function(x) which(x == min(x))[1])) )
( PolyDist <- unlist(lapply(Fdist, FUN=function(x) min(x)[1])) )
pts@data <- data.frame(pts@data, PolyID=min.dist, PDist=PolyDist)
require(classInt)
( cuts <- classIntervals(pts@data$PDist, 10, style="quantile") )
plotclr <- colorRampPalette(c("cyan", "yellow", "red"))( 20 )
colcode <- findColours(cuts, plotclr)
plot(polys,col="black")
plot(pts, col=colcode, pch=19, add=TRUE)
install.packages("classInt")
require(classInt)
( cuts <- classIntervals(pts@data$PDist, 10, style="quantile") )
plotclr <- colorRampPalette(c("cyan", "yellow", "red"))( 20 )
colcode <- findColours(cuts, plotclr)
plot(polys,col="black")
plot(pts, col=colcode, pch=19, add=TRUE)
library(sp)
x = cbind(c(0,1,1,0,0),c(0,0,1,1,0))
pol = SpatialPolygons(list(Polygons(list(Polygon(x)), "ID")))
set.seed(131)
pts = SpatialPoints(cbind(runif(10), runif(10)))
plot(pol)
points(pts, col = 'red')
library(rgeos)
gDistance(pts, pol, byid = TRUE) # will be 0, all inside
gDistance(pts, as(pol, "SpatialLines"), byid = TRUE) # dist to line
text(coordinates(pts),
as.character(
round(as.vector(gDistance(pts, as(pol, "SpatialLines"), byid = TRUE)), 3)),
pos = 4)
pts = SpatialPoints(cbind(runif(50), runif(50)))
plot(pol)
points(pts, col = 'red')
library(rgeos)
gDistance(pts, pol, byid = TRUE) # will be 0, all inside
gDistance(pts, as(pol, "SpatialLines"), byid = TRUE) # dist to line
text(coordinates(pts),
as.character(
round(as.vector(gDistance(pts, as(pol, "SpatialLines"), byid = TRUE)), 3)),
pos = 4)
n = 500
pts = SpatialPoints(cbind(runif(n), runif(n)))
plot(pol)
points(pts, col = 'red')
library(rgeos)
gDistance(pts, pol, byid = TRUE) # will be 0, all inside
gDistance(pts, as(pol, "SpatialLines"), byid = TRUE) # dist to line
text(coordinates(pts),
as.character(
round(as.vector(gDistance(pts, as(pol, "SpatialLines"), byid = TRUE)), 3)),
pos = 4)
hist(pts)
pts
gd <- gDistance(pts, as(pol, "SpatialLines"), byid = TRUE) # dist to line
gd
text(coordinates(pts),
as.character(
round(as.vector(gd), 3)),
pos = 4)
hist(pts)
gd <- as.vector(gDistance(pts, as(pol, "SpatialLines"), byid = TRUE)) # dist to line
text(coordinates(pts),
as.character(
round(gd, 3)),
pos = 4)
hist(pts)
hist(gd)
n = 5000
pts = SpatialPoints(cbind(runif(n), runif(n)))
plot(pol)
points(pts, col = 'red')
library(rgeos)
gDistance(pts, pol, byid = TRUE) # will be 0, all inside
gd <- as.vector(gDistance(pts, as(pol, "SpatialLines"), byid = TRUE)) # dist to line
text(coordinates(pts),
as.character(
round(gd, 3)),
pos = 4)
hist(gd)
n = 50000
pts = SpatialPoints(cbind(runif(n), runif(n)))
plot(pol)
points(pts, col = 'red')
library(rgeos)
gDistance(pts, pol, byid = TRUE) # will be 0, all inside
gd <- as.vector(gDistance(pts, as(pol, "SpatialLines"), byid = TRUE)) # dist to line
gDistance(pts, pol, byid = TRUE) # will be 0, all inside
gd <- as.vector(gDistance(pts, as(pol, "SpatialLines"), byid = TRUE)) # dist to line
hist(gd)
